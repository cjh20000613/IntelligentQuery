#include<iostream>
using namespace std;
#include <algorithm>
#include<time.h>

int weight[401] = { 0,170,140,160,70,200,140,170,90,170,130,120,120,110,170,30,130,190,160,120,70,150,180,30,40,60,40,20,130,90,190,190,170,80,140,190,140,130,70,30,140,190,180,110,200,110,30,170,40,60,50,130,120,180,110,180,120,180,110,30,30,50,50,110,140,40,30,120,90,170,100,160,180,40,130,160,60,50,110,180,60,40,40,110,150,200,70,70,160,130,20,70,190,90,110,120,150,60,70,70,130,170,140,160,70,200,140,170,90,170,130,120,120,110,170,30,130,190,160,120,70,150,180,30,40,60,40,20,130,90,190,190,170,80,140,190,140,130,70,30,140,190,180,110,200,110,30,170,40,60,50,130,120,180,110,180,120,180,110,30,30,50,50,110,140,40,30,120,90,170,100,160,180,40,130,160,60,50,110,180,60,40,40,110,150,200,70,70,160,130,20,70,190,90,110,120,150,60,70,70,130,170,140,160,70,200,140,170,90,170,130,120,120,110,170,30,130,190,160,120,70,150,180,30,40,60,40,20,130,90,190,190,170,80,140,190,140,130,70,30,140,190,180,110,200,110,30,170,40,60,50,130,120,180,110,180,120,180,110,30,30,50,50,110,140,40,30,120,90,170,100,160,180,40,130,160,60,50,110,180,60,40,40,110,150,200,70,70,160,130,20,70,190,90,110,120,150,60,70,70,130,170,140,160,70,200,140,170,90,170,130,120,120,110,170,30,130,190,160,120,70,150,180,30,40,60,40,20,130,90,190,190,170,80,140,190,140,130,70,30,140,190,180,110,200,110,30,170,40,60,50,130,120,180,110,180,120,180,110,30,30,50,50,110,140,40,30,120,90,170,100,160,180,40,130,160,60,50,110,180,60,40,40,110,150,200,70,70,160,130,20,70,190,90,110,120,150,60,70,70,130 };
int value[401] = { 0,170,56,128,14,40,140,68,18,68,52,72,120,66,102,30,52,76,128,48,56,90,108,24,16,36,16,16,130,54,76,152,102,64,112,152,28,130,42,12,84,38,72,66,120,110,24,102,24,24,30,52,48,144,88,72,120,72,44,18,6,10,30,66,84,16,30,48,36,170,40,128,144,24,52,128,12,20,66,36,24,16,24,66,150,80,56,14,64,130,4,28,114,54,44,72,90,36,56,42,26,170,56,128,14,40,140,68,18,68,52,72,120,66,102,30,52,76,128,48,56,90,108,24,16,36,16,16,130,54,76,152,102,64,112,152,28,130,42,12,84,38,72,66,120,110,24,102,24,24,30,52,48,144,88,72,120,72,44,18,6,10,30,66,84,16,30,48,36,170,40,128,144,24,52,128,12,20,66,36,24,16,24,66,150,80,56,14,64,130,4,28,114,54,44,72,90,36,56,42,26,170,56,128,14,40,140,68,18,68,52,72,120,66,102,30,52,76,128,48,56,90,108,24,16,36,16,16,130,54,76,152,102,64,112,152,28,130,42,12,84,38,72,66,120,110,24,102,24,24,30,52,48,144,88,72,120,72,44,18,6,10,30,66,84,16,30,48,36,170,40,128,144,24,52,128,12,20,66,36,24,16,24,66,150,80,56,14,64,130,4,28,114,54,44,72,90,36,56,42,26,170,56,128,14,40,140,68,18,68,52,72,120,66,102,30,52,76,128,48,56,90,108,24,16,36,16,16,130,54,76,152,102,64,112,152,28,130,42,12,84,38,72,66,120,110,24,102,24,24,30,52,48,144,88,72,120,72,44,18,6,10,30,66,84,16,30,48,36,170,40,128,144,24,52,128,12,20,66,36,24,16,24,66,150,80,56,14,64,130,4,28,114,54,44,72,90,36,56,42,26 };
int bag = 8000;								//背包大小
int dp[400][13000] = { { 0 } };			        //动态规划表
int item[13000];					        //最优解情况

void findMax(int object) {					//动态规划
	for (int i = 1; i <= object; i++) {
		for (int j = 1; j <= bag; j++) {
			if (j < weight[i])
				dp[i][j] = dp[i - 1][j];
			else
				dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);
		}
	}
}

void findWhat(int i, int j) {				//最优解情况
	if (i >= 0) {
		if (dp[i][j] == dp[i - 1][j]) {
			item[i] = 0;
			findWhat(i - 1, j);
		}
		else if (j - weight[i] >= 0 && dp[i][j] == dp[i - 1][j - weight[i]] + value[i]) {
			item[i] = 1;
			findWhat(i - 1, j - weight[i]);
		}
	}
}

void print(int object) {
	int values = 0;
	int weights = 0;
	int num = 0;
	for (int i = 1; i <= object; i++) {//最优解输出
		//cout << item[i] << ',';
		if (item[i] == 1) {
			num++;
			values += value[i];
			weights += weight[i];
		}
	}
	int residual = bag - weights;
	//cout << endl;
	//cout << "Values:" << values ;
	//cout << "Residual:" << residual ;
	//cout << "num:" << num << endl;

	cout << bag << ":" << values << endl;
}

int main()
{
	int allWeights = 0;
	int allValues = 0;
	int object = 100;
	for (int i = 1; i <= object; i++) {//最优解输出
		allValues += value[i];
		allWeights += weight[i];
	}
	cout << "allValues:" << allValues << endl;
	cout << "allWeights:" << allWeights << endl;
	

	findMax(object);
	findWhat(object,bag);
	print(object);
	cout << "The run time is: " << (long double)clock() / CLOCKS_PER_SEC << "s" << endl;

	return 0;
}
